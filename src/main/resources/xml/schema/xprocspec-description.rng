<?xml version="1.0" encoding="UTF-8"?>
<grammar xmlns="http://relaxng.org/ns/structure/1.0" xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0" datatypeLibrary="http://www.w3.org/2001/XMLSchema-datatypes">
    
    <include href="xprocspec.rng"/>
    
    <start>
        <ref name="description"/>
    </start>

    <define name="description" c>
        <a:documentation xml:space="preserve">
            A description is a description of a script. 
            It must have a script associated with it.
            It may also have a version to aid development over time.
        </a:documentation>
        <element name="description" ns="http://www.daisy.org/ns/pipeline/xproc/test">
            <ref name="common-attributes"/>
            <attribute name="script">
                <data type="anyURI"/>
            </attribute>
            <optional>
                <attribute name="xproc-version">
                    <data type="NMTOKEN"/>
                </attribute>
            </optional>
            <optional>
                <attribute name="version">
                    <data type="NMTOKEN"/>
                </attribute>
            </optional>
            <optional>
                <ref name="pending"/>
            </optional>
            <choice>
                <group>
                    <zeroOrMore>
                        <ref name="import"/>
                    </zeroOrMore>
                    <oneOrMore>
                        <ref name="scenario"/>
                    </oneOrMore>
                </group>
                <group>
                    <oneOrMore>
                        <ref name="import"/>
                    </oneOrMore>
                    <zeroOrMore>
                        <ref name="scenario"/>
                    </zeroOrMore>
                </group>
            </choice>
        </element>
    </define>

    <define name="common-attributes">
        <zeroOrMore>
            <attribute>
                <nsName ns="http://www.w3.org/XML/1998/namespace"/>
            </attribute>
        </zeroOrMore>
    </define>

    <define name="pending">
        <a:documentation xml:space="preserve">
            Anything that is within a &lt;pending&gt; element will remain untested, but will be
            reported as (eventual) desired behaviour. This is a good way of commenting out
            a set of behaviours that haven't been implemented yet, or scenarios whose
            desired behaviour hasn't been determined, or tests for code that you're not
            currently working on, to make the testing process faster.
            
            An optional label attribute can be used to describe why the scenario or
            assertion should not be tested.
        </a:documentation>

        <element name="pending" ns="http://www.daisy.org/ns/pipeline/xproc/test">
            <ref name="common-attributes"/>
            <optional>
                <ref name="label"/>
            </optional>
            <choice>
                <oneOrMore>
                    <ref name="scenario"/>
                </oneOrMore>
                <oneOrMore>
                    <ref name="assertion"/>
                </oneOrMore>
            </choice>
        </element>
    </define>

    <define name="import">
        <a:documentation xml:space="preserve">
            An import brings in all the scenarios from the referenced file (which must
            itself be an XProcSpec description). All the unshared scenarios in that imported
            XProcSpec will be run on the stylesheet that this XProcSpec document describes.
            Importing is recursive and may be circular (although only one copy of a given
            imported document will actually be imported).
        </a:documentation>
        <element name="import" ns="http://www.daisy.org/ns/pipeline/xproc/test">
            <ref name="common-attributes"/>
            <attribute name="href">
                <data type="anyURI"/>
            </attribute>
        </element>
    </define>

    <define name="scenario">
        <a:documentation xml:space="preserve">
            A step scenario is one based on a call to a pipeline. The &lt;call&gt;
            element defines the step call and the inputs, options and parameters passed to it and the
            &lt;assertion&gt; elements test the ports of the pipeline. Child scenarios
            can override the ports, options and parameters in the template call.
        </a:documentation>
        <element name="scenario" ns="http://www.daisy.org/ns/pipeline/xproc/test">
            <ref name="common-attributes"/>
            <ref name="label"/>
            <ref name="call"/>
            <zeroOrMore>
                <ref name="like"/>
            </zeroOrMore>
            <choice>
                <oneOrMore>
                    <ref name="scenario"/>
                </oneOrMore>
                <oneOrMore>
                    <ref name="context"/>
                    <oneOrMore>
                        <ref name="assertion"/>
                    </oneOrMore>
                </oneOrMore>
            </choice>
        </element>
    </define>

    <define name="label">
        <a:documentation xml:space="preserve">
            A scenario's label should describe the context that the scenario sets. Top-
            level scenarios' labels should be of the form "the square of a number" or 
            "the XHTML for a &lt;P1&gt; element". Nested scenario labels will usually start with 
            the word "with"; it should make sense if the labels of ancestor scenarios are 
            concatenated with this one. For example "with a Type attribute".
        </a:documentation>
        <choice>
            <attribute name="label"/>
            <element name="label" ns="http://www.daisy.org/ns/pipeline/xproc/test">
                <ref name="common-attributes"/>
                <ref name="any-content"/>
            </element>
        </choice>
    </define>

    <define name="context">
        <element name="context" ns="http://www.daisy.org/ns/pipeline/xproc/test">
            <ref name="common-attributes"/>
            <optional>
                <ref name="label"/>
            </optional>
            <oneOrMore>
                <ref name="document"/>
            </oneOrMore>
        </element>
    </define>

    <define name="assertion">
        <choice>
            <ref name="expect"/>
            <!-- extension point for other types of assertions -->
        </choice>
    </define>

    <define name="expect">
        <element name="expect" ns="http://www.daisy.org/ns/pipeline/xproc/test">
            <ref name="common-attributes"/>
            <ref name="label"/>
            <choice>
                <group>
                    <!-- XPath assertion -->
                    <attribute name="test"/>
                </group>
                <group>
                    <!-- Document comparison -->
                    <zeroOrMore>
                        <ref name="document"/>
                    </zeroOrMore>
                </group>
            </choice>
        </element>
    </define>

    <define name="call">
        <a:documentation xml:space="preserve">
            A &lt;call&gt; element defines a step call and the
            inputs, options and parameters passed to it.
        </a:documentation>
        <element name="call" ns="http://www.daisy.org/ns/pipeline/xproc/test">
            <ref name="common-attributes"/>
            <optional>
                <attribute name="step">
                    <data type="QName"/>
                </attribute>
            </optional>
            <zeroOrMore>
                <choice>
                    <ref name="option"/>
                    <ref name="param"/>
                    <ref name="input"/>
                </choice>
            </zeroOrMore>
        </element>
    </define>

    <define name="option">
        <element name="option" ns="http://www.daisy.org/ns/pipeline/xproc/test">
            <ref name="common-attributes"/>
            <attribute name="name">
                <data type="QName"/>
            </attribute>
            <attribute name="select"/>
            <optional>
                <attribute name="base-uri">
                    <choice>
                        <value>temp-dir</value>
                    </choice>
                </attribute>
            </optional>
        </element>
    </define>

    <define name="param">
        <element name="param" ns="http://www.daisy.org/ns/pipeline/xproc/test">
            <ref name="common-attributes"/>
            <attribute name="name">
                <data type="QName"/>
            </attribute>
            <attribute name="select"/>
            <optional>
                <attribute name="base-uri">
                    <choice>
                        <value>temp-dir</value>
                    </choice>
                </attribute>
            </optional>
        </element>
    </define>

    <define name="input">
        <element name="input" ns="http://www.daisy.org/ns/pipeline/xproc/test">
            <ref name="common-attributes"/>
            <zeroOrMore>
                <ref name="document"/>
            </zeroOrMore>
        </element>
    </define>

    <define name="like">
        <a:documentation xml:space="preserve">
            The &lt;like&gt; element pulls a shared scenario into this one (which may be shared
            or unshared). Any environment set within the shared scenario is merged with
            this one, and any tests in the shared scenario are run in addition to the
            ones in this scenario. This allows for modular, reusable sets of tests which
            can be applied in multiple contexts.
        </a:documentation>
        <element name="like" ns="http://www.daisy.org/ns/pipeline/xproc/test">
            <ref name="common-attributes"/>
            <ref name="label"/>
        </element>
    </define>

    <define name="document">
        <element name="document" ns="http://www.daisy.org/ns/pipeline/xproc/test">
            <ref name="common-attributes"/>
            <choice>
                <group>
                    <!-- inline document -->
                    <ref name="any-element"/>
                </group>
                <group>
                    <!-- file -->
                    <attribute name="file">
                        <data type="anyURI"/>
                    </attribute>
                    <optional>
                        <attribute name="method">
                            <choice>
                                <value>xml</value>
                                <value>html</value>
                                <value>text</value>
                                <value>binary</value>
                            </choice>
                        </attribute>
                    </optional>
                    <optional>
                        <attribute name="base-uri">
                            <choice>
                                <value>temp-dir</value>
                            </choice>
                        </attribute>
                    </optional>
                </group>
                <group>
                    <!-- directory -->
                    <attribute name="directory">
                        <data type="anyURI"/>
                    </attribute>
                    <optional>
                        <attribute name="recursive">
                            <data type="boolean"/>
                        </attribute>
                    </optional>
                    <optional>
                        <attribute name="base-uri">
                            <choice>
                                <value>temp-dir</value>
                            </choice>
                        </attribute>
                    </optional>
                </group>
            </choice>
        </element>
    </define>

    <define name="any-content">
        <interleave>
            <zeroOrMore>
                <ref name="any-element"/>
            </zeroOrMore>
            <text/>
        </interleave>
    </define>

    <define name="any-element">
        <element>
            <anyName/>
            <zeroOrMore>
                <ref name="any-attribute"/>
            </zeroOrMore>
            <zeroOrMore>
                <ref name="any-content"/>
            </zeroOrMore>
        </element>
    </define>

    <define name="any-attribute">
        <attribute>
            <anyName/>
        </attribute>
    </define>

</grammar>
